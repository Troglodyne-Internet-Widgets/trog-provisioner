#!/usr/bin/env perl

package Trog::Bin::Provisioner;

use strict;
use warnings;

use Cwd qw{abs_path};
use FindBin;
use Config::Simple();
use File::Slurper();
use File::Copy();
use YAML::XS();
use JSON::PP();
use List::Util qw{any uniq};
use File::Which qw {which};
use Getopt::Long qw{GetOptionsFromArray};
use Net::OpenSSH::More;

sub _coerce_array {
    return \@_;
}

our $domain_dir;
sub main {
    my @args = @_;

    my ($reuse,$reuser);
    GetOptionsFromArray(\@args,
        'existing=s'  => \$reuse,
        'existing-user=s' => \$reuser,
        'domaindir=s' => \$domain_dir,
    );

    my $domain = shift @args;
    die "No domain passed" unless $domain;

    $domain_dir //='/opt/domains';

    $domain =~ s/\///g;
    my $cfile = "$domain_dir/$domain/provision.conf";
    die "No such file provision.conf in $domain/" unless -f $cfile;

    my $udf = "$domain_dir/$domain/users.yaml";
    die "User definition file $udf not present!" unless -f $udf;

    die "Terraform not installed" unless which('terraform');

    my $domain_mongled = $domain;
    $domain_mongled =~ s/\./-/g;

    my $config = Config::Simple->new($cfile);

    my $data = "$domain_dir/$domain/data.tar.gz";
    die "No data to host in $domain/" unless -f $data;
    # Stash domain in config object for later use
    $config->param('domain', $domain);

    mkdir '/opt/terraform';
    mkdir '/opt/terraform/disks';
    mkdir '/opt/terraform/config';

    my $nc = mongle_network_configuration($config);
    print "Wrote $nc\n";

    my $ss = mongle_setup_script($config);
    print "Wrote $ss\n";

    my $lc = mongle_logging_config($config);
    print "Wrote $lc\n";

    # If the domain is already up, let's find the IP
    my $qdn = $domain;
    $qdn =~ s/\.\S+$//;
    my $old_ip = qx#virsh net-dhcp-leases default | grep $qdn | awk '{print \$5}' | sed -E s/\\\\/[0-9]+\$//#;
    $old_ip = 'bogus' unless $old_ip;
    chomp $old_ip;

    if ($reuse) {
        # Re-Use the existing VM, and just ship over what we got and run the makefile again.
        my %opts = ( host => $old_ip );
        $opts{user}     = $reuser // 'root';
        $opts{key_path} = $config->param("$domain_dir/$domain/key.rsa");
        my $ssh = Net::OpenSSH::More->new(%opts);
        print "Syncing setup script\n";
        my $res = $ssh->sftp->put( "$domain_dir/$domain/setup.sh", "setup.sh" );
        $ssh->cmd("chmod +x setup.sh");
        print "Scheduling job to run setup script\n";
        $ssh->cmd("sudo at now -f setup.sh");
        print "Done.\n";
        return 0;
    }

    my $tf = mongle_terraform_template($config);
    print "Wrote $tf\n";

    my $cc = mongle_cloud_init($config);
    print "Wrote $cc\n";

    chdir "/opt/terraform/config";
    # Figure out if we need to liquidate/respawn/spawn existing stuff
    my $result = 0;
    if (!$reuse) {
        my @exempt = qw{libvirt_volume.image_base libvirt_pool.tf_disks};
        my $resources = qx{terraform state list};
        chomp $resources;
        foreach my $resource (split(/\n/, $resources)) {
            next unless $resource =~ m/\Q$domain_mongled\E/;
            next if any { $_ eq $resource } @exempt;
            print "Terminating $resource\n";
            #XXX terraform has no good means to say "HEY THESE ARE SHARED RESOURCES HANDS OFF!"
            #XXX So we have to instead painstakingly kill everything that isn't.
            #XXX they claim modules are the way to do this, but that appears to be false.
            #XXX Maybe I have to instead make both the shared and vm specific stuff modules? IDK
            system(qw{terraform destroy -auto-approve -target}, $resource) unless any { $_ eq $resource } @exempt;
        }
        system(qw{terraform init});
        system(qw{terraform plan -out tf.plan});
        system(qw{terraform apply tf.plan});
        $result = $? >> 8;
    }
    die "Terraform cried uncle" if $result;

    print "Waiting for VM to come live...";
    my $new_ip='';
    my $oldip_grep = '';
    $oldip_grep = "| grep -v $old_ip";
    for (1..30) {
        $new_ip = qx#virsh net-dhcp-leases default | grep $qdn $oldip_grep | awk '{print \$5}' | sed -E s/\\\\/[0-9]+\$//#;
        chomp $new_ip;
        last if $new_ip && ($new_ip ne $old_ip);
        print ".";
        sleep 1;
    }
    print "\nVM never came up!\n" unless $new_ip;
    print "\nAll Done!  The server should be live at $new_ip\n";

    return 0;
}

sub mongle_terraform_template {
    my ($config) = @_;

    my $domain = $config->param('domain');
    my $image  = $config->param('image');
    my $disk_size = $config->param('size');
    #my $user      = $config->param('admin_user');
    #my $pkey_loc  = $config->param('pkey_loc');

    #die "Require admin_user & valid private key location (pkey_loc) to continue" unless $user && -f $pkey_loc;

    my $bridge_device = qx/brctl show | grep -vP 'vnet|virbr' | tail -n1 | awk '{print \$1}'/;
    die "Could not determine outbound bridge device!" unless $bridge_device;
    chomp $bridge_device;
    print "Using outbound bridge $bridge_device\n";

    # OK, let's get the UUID of our storage pool IN CASE we are re-using it
    my $pool_info = qx/virsh pool-list --uuid --name/;
    my %pools;
    open my $pd, '<', \$pool_info;
    foreach my $line (<$pd>) {
        my ($k,$v) = $line =~ m/^\s*(\S+)\s+(\S+)\s*$/;
        $pools{$v} = $k if $v;
    }
    close $pd;

    my $imagedir = "$domain_dir/$domain";
    # TODO make this configurable so we can use lvm
    my $libvirt_pool = $pools{tf_disks};
    my ($import_block, $image_block) = ('','');
    if ($libvirt_pool) {
        print "Re-Using existing libvirt pool $libvirt_pool\n";
        $import_block = qq|
import {
    to = libvirt_pool.tf_disks
    id = "$libvirt_pool"
}
|;
        #Like above, if the relevant baseimage exists, just import it
        my $baseimage = '/opt/terraform/disks/baseimage-qcow2';
        $image = $baseimage if -f $baseimage;
    }

    my $domain_mongled = $domain;
    $domain_mongled =~ s/\./-/g;

    my %to_mongle = (
        'main.tmpl'   => "config/main.tf",
        'domain.tmpl' => "config/$domain.tf",
    );

    foreach my $file (keys(%to_mongle)) {
        my $tf_template = File::Slurper::read_text("$FindBin::Bin/../$file");

        $tf_template =~ s/%BRIDGENAME%/$bridge_device/gmx;
        $tf_template =~ s/%REPLACEME%/$domain/gmx;
        $tf_template =~ s/%MONGLED%/$domain_mongled/gmx;
        $tf_template =~ s/%GIGGLEBYTES%/$disk_size/gmx;
        #$tf_template =~ s/%USER%/$user/gmx;
        #$tf_template =~ s/%PKEY_LOC%/$pkey_loc/gmx;
        $tf_template =~ s/%CLOUDIMG%/$image/gmx;
        $tf_template =~ s/%LIBVIRT_POOL_IMPORT%/$import_block/gmx;
        $tf_template =~ s/%BASE_IMAGE_IMPORT%/$image_block/gmx;

        File::Slurper::write_text("/opt/terraform/$to_mongle{$file}", $tf_template);
    }

    #XXX tf plugin should do this automatically, but does not
    unlink "/opt/terraform/disks/commoninit.iso";

    return "/opt/terraform/config/main.tf";
}

# Slam in the IPs, gw, resolvers
sub mongle_network_configuration {
    my $config = shift;

    my $domain = $config->param('domain');
    my $ips  = _coerce_array($config->param('ips'));
    my $gw   = $config->param('gateway');
    my $res  = _coerce_array($config->param('resolvers'));

    # We need two adapters, one on virbr0 and another on the bridge.
    # So, we need to figure out:
    # 1. IP of the virbr
    # 2. name of the bridge device.
    # 3. IP of bridge device.

    my $virbr_device = qx/brctl show | grep virbr | tail -n1 | awk '{print \$1}'/;
    die "Could not determine libvirt network device!" unless $virbr_device;
    chomp $virbr_device;
    print "Using libvirt network device $virbr_device\n";

    my $virbr_ip = qx/ip addr show dev $virbr_device | grep inet | head -n1 | awk '{print \$2}'/;
    die "Could not determine IP address for $virbr_device" unless $virbr_ip;
    chomp $virbr_ip;
    $virbr_ip =~ s/\/\d\d$//;
    print "HV internal IP: $virbr_ip\n";

    # Stash this in the config object for later use by the clown-config
    $config->param('hv_internal_ip', $virbr_ip);

    # Such an astonishingly tedious format
    my @subnets = map {
        {
            type      => 'static',
            address   => $_,
            gateway   => $gw,
            dns_nameservers => $res,
            dns_search      => [$domain],
        }
    } @$ips;

    # Do DHCP if no IP was supplied
    if (!@subnets) {
        @subnets = (
            {
                type => 'dhcp',
            }
        );
    }

    my $netconf = {
       network => {
            version => 1,
            config  => [
                {
                    type => 'physical',
                    name => 'ens4',
                    subnets => \@subnets,
                },
                {
                    type => 'physical',
                    name => 'ens3',
                    subnets => [
                        {
                            type => 'dhcp',
                        },
                    ],
                },
            ],
       },
    };

    my $cf = "/opt/terraform/config/$domain.network_config.cfg";
    File::Slurper::write_text($cf, YAML::XS::Dump($netconf));
    return $cf;
}

# Generate and store a new SSH key for the guest, which we will authorize on the HV to grab the data.tar.gz
sub mongle_cloud_init {
    my $config = shift;

    my $domain = $config->param('domain');
    my $contactemail = $config->param('contact_email');
    my $user = getpwuid($<);

    # Generate a new key for the child
    qx{yes | ssh-keygen -t rsa -f $domain_dir/$domain/key.rsa -N ''};
    die "No key generated!" unless -f "$domain_dir/$domain/key.rsa";
    die "No pubkey generated!" unless -f "$domain_dir/$domain/key.rsa.pub";

    # Authorize the key with the transfer user.
    my $pubkey = File::Slurper::read_text("$domain_dir/$domain/key.rsa.pub");
    chomp $pubkey;
    open(my $fh, '>>', "$ENV{HOME}/.ssh/authorized_keys");
    print $fh "$pubkey\n";
    close($fh);

    my $pkgs = _coerce_array($config->param('packages'));
    # We absolutely must have atd, sendmail and make.
    push(@$pkgs, 'sendmail') unless any { $_ eq 'postfix' } @$pkgs;
    push(@$pkgs, qw{at make});
    @$pkgs = uniq @$pkgs;

    my $udf = "$domain_dir/$domain/users.yaml";
    my $userdefs = YAML::XS::Load(File::Slurper::read_text($udf));

    $YAML::XS::Boolean = "JSON::PP";
    my $clown_config = {
        runcmd => [
            qq{echo "root:$contactemail\n" > /etc/aliases },
            "at now -f /root/setup.sh",
        ],
        packages => $pkgs,
        users => $userdefs->{users},
        fqdn => $domain,
        manage_etc_hosts => 'localhost',
        final_message => "Boot configuration complete.",
        # Make sure root can scp to/from the transfer user on the HV, and we start shipping logs.
        write_files => [
            {
                content     => File::Slurper::read_text("$domain_dir/$domain/key.rsa"),
                path        => "/root/.ssh/id_rsa",
                owner       => "root:root",
                permissions => '0600',
                defer       => $JSON::PP::true,
            },
            {
                content     => File::Slurper::read_text("$domain_dir/$domain/key.rsa.pub"),
                path        => "/root/.ssh/id_rsa.pub",
                owner       => "root:root",
                permissions => '0600',
                defer       => $JSON::PP::true,
            },
            {
                content     => File::Slurper::read_text("$domain_dir/$domain/setup.sh"),
                path        => "/root/setup.sh",
                owner       => "root:root",
                permissions => "0775",
                defer       => $JSON::PP::true,
            },
        ],
        rsyslog => {
            install_rsyslog => $JSON::PP::true,
            config_dir => '/etc/rsyslog.d',
            configs => [{
                filename => '10-ship_logs_to_hv.conf',
                content  => File::Slurper::read_text("$domain_dir/$domain/rsyslog.conf"),
             }]
        }
    };
    my $cf = "/opt/terraform/config/$domain.cloud_init.cfg";
    File::Slurper::write_text($cf, "#cloud-config\n".YAML::XS::Dump($clown_config));
    return $cf;
}

sub mongle_setup_script {
    my $config = shift;
    my $domain = $config->param('domain');
    my $hvip   = $config->param('hv_internal_ip');

    use Data::Dumper;
    my ($username) = getpwuid($<);

    my $script_template = File::Slurper::read_text("$FindBin::Bin/../setup.tmpl");
    $script_template =~ s/%THISIP%/$hvip/gmx;
    $script_template =~ s/%DOMAIN%/$domain/gmx;
    $script_template =~ s/%THISDIR%/$domain_dir/gmx;
    $script_template =~ s/%USER%/$username/gmx;

    my $sf = "$domain_dir/$domain/setup.sh";
    File::Slurper::write_text($sf, $script_template);
    return $sf;
}

# Make this VM send its rsyslog to here, or wherever is setup correctly
sub mongle_logging_config {
    my $config = shift;
    my $domain = $config->param('domain');
    my $ship_to = $config->param('hv_internal_ip');

    my $local_config_template = File::Slurper::read_text("$FindBin::Bin/../rsyslog.tmpl");
    $local_config_template =~ s/%DOMAIN%/$domain/gmx;

    my $lcf = "/etc/rsyslog.d/10-$domain.conf";
    File::Slurper::write_text($lcf, $local_config_template);

    my $config_template = File::Slurper::read_text("$FindBin::Bin/../rsyslog-guest.tmpl");
    $config_template =~ s/%LOGHOST%/$ship_to/gmx;

    my $lf = "$domain_dir/$domain/rsyslog.conf";
    File::Slurper::write_text($lf, $config_template);
    return $lf;
}

exit main(@ARGV) unless caller;

1;
